import { InferType } from 'yup';
export declare const CXoneRoutingQueueSchema: import("yup/lib/object").OptionalObjectSchema<{
    id: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    name: import("yup/lib/mixed").MixedSchema<any, import("yup/lib/types").AnyObject, any>;
    isSubqueue: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    skillId: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    agentResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFirstResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFollowOnResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerIdleTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    timeExtensionEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
}, import("yup/lib/object").AnyObject, import("yup/lib/object").TypeOfShape<{
    id: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    name: import("yup/lib/mixed").MixedSchema<any, import("yup/lib/types").AnyObject, any>;
    isSubqueue: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    skillId: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    agentResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFirstResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFollowOnResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerIdleTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    timeExtensionEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
}>>;
export declare type CXoneRoutingQueue = InferType<typeof CXoneRoutingQueueSchema>;
export declare const CXoneRoutingQueueArray: import("yup").ArraySchema<import("yup").ObjectSchema<import("yup/lib/object").Assign<import("yup/lib/object").ObjectShape, {
    id: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    name: import("yup/lib/mixed").MixedSchema<any, import("yup/lib/types").AnyObject, any>;
    isSubqueue: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    skillId: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    agentResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFirstResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFollowOnResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerIdleTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    timeExtensionEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
}>, import("yup/lib/object").AnyObject, import("yup/lib/object").TypeOfShape<import("yup/lib/object").Assign<import("yup/lib/object").ObjectShape, {
    id: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    name: import("yup/lib/mixed").MixedSchema<any, import("yup/lib/types").AnyObject, any>;
    isSubqueue: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    skillId: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    agentResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFirstResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFollowOnResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerIdleTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    timeExtensionEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
}>>, import("yup/lib/object").AssertsShape<import("yup/lib/object").Assign<import("yup/lib/object").ObjectShape, {
    id: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    name: import("yup/lib/mixed").MixedSchema<any, import("yup/lib/types").AnyObject, any>;
    isSubqueue: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    skillId: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    agentResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFirstResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFollowOnResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerIdleTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    timeExtensionEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
}>>>, import("yup/lib/types").AnyObject, import("yup/lib/object").TypeOfShape<import("yup/lib/object").Assign<import("yup/lib/object").ObjectShape, {
    id: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    name: import("yup/lib/mixed").MixedSchema<any, import("yup/lib/types").AnyObject, any>;
    isSubqueue: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    skillId: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    agentResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFirstResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFollowOnResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerIdleTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    timeExtensionEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
}>>[], import("yup/lib/object").AssertsShape<import("yup/lib/object").Assign<import("yup/lib/object").ObjectShape, {
    id: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    name: import("yup/lib/mixed").MixedSchema<any, import("yup/lib/types").AnyObject, any>;
    isSubqueue: import("yup/lib/string").RequiredStringSchema<string, import("yup/lib/types").AnyObject>;
    skillId: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    agentResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFirstResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerResponseEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
    agentFollowOnResponseTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    customerIdleTime: import("yup").NumberSchema<number, import("yup/lib/types").AnyObject, number>;
    timeExtensionEnabled: import("yup").BooleanSchema<boolean, import("yup/lib/types").AnyObject, boolean>;
}>>[]>;
